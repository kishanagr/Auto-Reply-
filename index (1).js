const login = require("ws3-fca");
const fs = require("fs");
const express = require("express");

// тЬЕ AppState (fbstate.json) рд▓реЛрдб рдХрд░рдирд╛
let appState;
try {
  appState = JSON.parse(fs.readFileSync("appstate.json", "utf-8"));
} catch (err) {
  console.error("тЭМ appstate.json рдкрдврд╝рдиреЗ рдореЗрдВ рджрд┐рдХреНрдХрдд:", err);
  process.exit(1);
}

// тЬЕ Express рд╕рд░реНрд╡рд░ (Render/UptimeRobot рдХреЗ рд▓рд┐рдП рдЬрд╝рд┐рдВрджрд╛ рд░рдЦрдиреЗ рдХреЛ)
const app = express();
const PORT = process.env.PORT || 3000;
app.get("/", (req, res) => res.send("ЁЯдЦ Auto Reply Bot рдЪрд╛рд▓реВ рд╣реИ!"));
app.listen(PORT, () => console.log(`ЁЯМР рд╡реЗрдм рд╕рд░реНрд╡рд░ ${PORT} рдкреЛрд░реНрдЯ рдкрд░ рдЪрд▓ рд░рд╣рд╛ рд╣реИ`));

// тЬЕ Auto Reply рдлрд╝рдВрдХреНрд╢рди
function startAutoReply(api) {
  api.listenMqtt((err, event) => {
    if (err) return console.error("тЭМ Listen Error:", err);

    if (event.type === "message" && event.body) {
      console.log(`ЁЯТм ${event.senderID} рдиреЗ рдореИрд╕реЗрдЬ рднреЗрдЬрд╛: ${event.body}`);

      // тЬЕ Auto reply рднреЗрдЬрдирд╛
      api.sendMessage("тЬЕ рдЖрдкрдХрд╛ рдореИрд╕реЗрдЬ рдорд┐рд▓ рдЧрдпрд╛ рднрд╛рдИ!", event.threadID, (err) => {
        if (err) console.error("тЭМ Reply рднреЗрдЬрдиреЗ рдореЗрдВ рджрд┐рдХреНрдХрдд:", err);
        else console.log("тЬЕ Reply рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛.");
      });
    }
  });
}

// ЁЯЯв Login
login({ appState }, (err, api) => {
  if (err) {
    console.error("тЭМ Login Failed:", err);
    return;
  }

  console.log("тЬЕ рд▓реЙрдЧрд┐рди рд╕рдлрд▓ред Auto Reply рдЪрд╛рд▓реВ рд╣реИред");
  startAutoReply(api);
});
